# Note: in our original (Theano) model, we used tanh instead of RELU and
#       also we didn't have normalization layers at the output of each
#       convolutional layer...


name: "CiresanN3"

#input: "data"
#input_dim: 100
#input_dim: 1
#input_dim: 65
#input_dim: 65

layers {
  type: MEMORY_DATA
  name: "data"
  top: "data"
  top: "label"
  memory_data_param {
    batch_size:  100
    channels:    1
    height:      65
    width:       65
  }
}


layers {
  name: "conv1"
  type: CONVOLUTION
  bottom: "data"
  top: "conv1"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 1
  convolution_param {
    num_output: 48
    pad: 0
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.0001
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu1"
  type: RELU
  bottom: "conv1"
  top: "relu1"
}
layers {
  name: "pool1"
  type: POOLING
  bottom: "relu1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 1
  }
}

layers {
  name: "conv2"
  type: CONVOLUTION
  bottom: "pool1"
  top: "conv2"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 1
  convolution_param {
    num_output: 48
    pad: 0
    kernel_size: 5     # TODO
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu2"
  type: RELU
  bottom: "conv2"
  top: "relu2"
}
layers {
  name: "pool2"
  type: POOLING
  bottom: "relu2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 1
  }
}

layers {  
  name: "conv3"
  type: CONVOLUTION
  bottom: "pool2"
  top: "conv3"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 1
  convolution_param {
    num_output: 48
    pad: 0
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu3"
  type: RELU
  bottom: "conv3"
  top: "relu3"
}
layers {
  name: "pool3"
  type: POOLING
  bottom: "relu3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 1
  }
}


layers {
  name: "ip1"
  type: INNER_PRODUCT
  bottom: "pool3"
  top: "ip1"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 250
  weight_decay: 1
  inner_product_param {
    num_output: 200
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layers {
  name: "relu4"
  type: RELU
  bottom: "ip1"
  top: "relu4"
}

# TEMP: mjp experimenting with dropout
#layers {
#  name: "dropIP1"
#  type: DROPOUT
#  bottom: "ip1"
#  top: "ip1"
#  dropout_param {
#    dropout_ratio: 0.5
#  }
#}


layers {
  name: "ip2"
  type: INNER_PRODUCT
  bottom: "relu4"
  top: "ip2"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 250
  weight_decay: 1
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}


layers {
  name: "accuracy"
  type: ACCURACY
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
#  include: { phase: TEST }
}

layers {
  type: SOFTMAX_LOSS
  name: "loss"
  top: "loss"
  bottom: "ip2"
  bottom: "label"
  #loss_weight: 1
}


layers {
  type: SOFTMAX
  name: "prob"
  top: "prob"
  bottom: "ip2"
}
